# -*- coding: utf-8 -*-
"""HackerEarthCompetition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fPb9xSDFkUFMJnxZ90w5JGDtlF9TS7-1
"""

def regressor1(x_train,x_test,y_train):
  from sklearn.linear_model import LinearRegression
  from sklearn.tree import DecisionTreeRegressor
  from sklearn.ensemble import RandomForestRegressor  
  from sklearn.svm import SVR

  lr = LinearRegression()
  lr.fit(x_train,y_train)
  y_pred = lr.predict(x_test)
  
  dtr = DecisionTreeRegressor()
  dtr.fit(x_train,y_train)
  y_pred2 = dtr.predict(x_test)

  rfr = RandomForestRegressor()
  rfr.fit(x_train,y_train)
  y_pred3 = rfr.predict(x_test)

  svr = SVR()
  svr.fit(x_train,y_train)
  y_pred4 = svr.predict(x_test)

  return y_pred,y_pred2,y_pred3,y_pred4

def regressor2(x_train,x_test,y_train,y_test):
  from sklearn.metrics import mean_absolute_error
  from sklearn.metrics import r2_score
  from sklearn.linear_model import LinearRegression
  from sklearn.tree import DecisionTreeRegressor
  from sklearn.ensemble import RandomForestRegressor  
  from sklearn.svm import SVR

  lr = LinearRegression()
  lr.fit(x_train,y_train)
  y_pred = lr.predict(x_test)
  lre = mean_absolute_error(y_test,y_pred)
  print("Linear Regression\nmean absolute error : ",lre,"\n")
  print("R2_score : ",r2_score(y_test,y_pred),"\n")
  
  dtr = DecisionTreeRegressor()
  dtr.fit(x_train,y_train)
  y_pred2 = dtr.predict(x_test)
  dtre = mean_absolute_error(y_test,y_pred2)
  print("Decision Tree Classifier\nmean absolute error : ",dtre,"\n")
  print("R2_score : ",r2_score(y_test,y_pred2),"\n")

  rfr = RandomForestRegressor()
  rfr.fit(x_train,y_train)
  y_pred3 = rfr.predict(x_test)
  rfre = mean_absolute_error(y_test,y_pred3)
  print("Random Forest Regressor\nmean absolute error : ",rfre,"\n")
  print("R2_score : ",r2_score(y_test,y_pred3),"\n")
  svr = SVR()
  svr.fit(x_train,y_train)
  y_pred4 = svr.predict(x_test)
  svre = mean_absolute_error(y_test,y_pred4)
  print("Suppoer Vector Regression\nmean absolute error : ",svre,"\n")
  print("R2_score : ",r2_score(y_test,y_pred4),"\n")

  return y_pred,y_pred2,y_pred3,y_pred4

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

train = pd.read_csv("/content/train.csv")

print(train.shape)
train.head(2)

train.info()

test = pd.read_csv("/content/test.csv")

test.shape

print(train.isnull().sum())
print(test.isnull().sum())

from sklearn.impute import SimpleImputer, KNNImputer

impute = SimpleImputer(strategy = "most_frequent")
knnimputer = KNNImputer(n_neighbors=15)

y = train.iloc[:,-1]
train.drop(train.columns[-1],axis=1,inplace=True)

train2 = train.iloc[:,[3,6]]
train2 = knnimputer.fit_transform(train2)
train2 = pd.DataFrame(train2)

train3 = train.iloc[:,[5,10,11]]
train3 = impute.fit_transform(train3)
train3 = pd.DataFrame(train3)

train.iloc[:,3] = train2.iloc[:,0]
train.iloc[:,6] = train2.iloc[:,1]
train.iloc[:,5] = train3.iloc[:,0]
train.iloc[:,10] = train3.iloc[:,1]
train.iloc[:,11] = train3.iloc[:,2]

test2 = test.iloc[:,[3,6]]
test2 = knnimputer.fit_transform(test2)
test2 = pd.DataFrame(test2)

test3 = test.iloc[:,[5,10,11]]
test3 = impute.fit_transform(test3)
test3 = pd.DataFrame(test3)

test.iloc[:,3] = test2.iloc[:,0]
test.iloc[:,6] = test2.iloc[:,1]
test.iloc[:,5] = test3.iloc[:,0]
test.iloc[:,10] = test3.iloc[:,1]
test.iloc[:,11] = test3.iloc[:,2]

from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
ohe = OneHotEncoder()
sc = StandardScaler()

train2 = train.iloc[:,[1,5,7,8,10,11]]
train2 = ohe.fit_transform(train2)
train2 = pd.DataFrame(train2.toarray())

train3 = train.iloc[:,[2,3,4,6,9,12,13]]
train3 = sc.fit_transform(train3)
train3 = pd.DataFrame(train3)

train = pd.concat([train2,train3],axis=1)

test2 = test.iloc[:,[1,5,7,8,10,11]]
test2 = ohe.fit_transform(test2)
test2 = pd.DataFrame(test2.toarray())

test3 = test.iloc[:,[2,3,4,6,9,12,13]]
test3 = sc.fit_transform(test3)
test3 = pd.DataFrame(test3)

test = pd.concat([test2,test3],axis=1)

p1,p2,p3,p4 = regressor1(train,test,y)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(p1,p2)

mean_absolute_error(p2,p3)

mean_absolute_error(p3,p4)

mean_absolute_error(p4,p2)

p3

test = pd.read_csv("/content/test.csv")
id = test.iloc[:,0]

submission = pd.DataFrame({"Property_ID":id,"Habitability_score":p3})

submission

submission.to_csv("Submission.csv",index=False)

pd.read_csv("Submission.csv")

