# -*- coding: utf-8 -*-
"""Spaceship Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DhU9jh2o6_y5MWXUxVjzEGIIUzFIq0dR
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import LabelEncoder,OneHotEncoder,StandardScaler
sc = StandardScaler()
le = LabelEncoder()
ohe = OneHotEncoder()

df1 = pd.read_csv("train.csv")

df1.head()

df2 = pd.read_csv("test.csv")

y = df1.iloc[:,-1]
df1 = df1.iloc[:,:-1]

df1.shape,df2.shape

final = pd.concat([df1,df2])

import math
li1 = []
li2 = []
li3 = []
for a in final.Cabin:
  try:
    li1.append(a.split("/")[0])
    li2.append(a.split("/")[1])
    li3.append(a.split("/")[2])
  except AttributeError as e:
    li1.append(np.nan)
    li2.append(np.nan)
    li3.append(np.nan)

dff = pd.DataFrame({"Deck":li1,"Num":li2,"Side":li3})

lis1=[]
lis2=[]
for a in final.iloc[:,0]:
  lis1.append(int(a.split("_")[0]))
  lis2.append(int(a.split("_")[1]))

dff2 = pd.DataFrame({"Group":lis1,"Number":lis2})

final.drop([final.columns[3],final.columns[0]],axis=1,inplace=True)
final = final.iloc[:,:-1]
final

final = pd.concat([final.reset_index(),dff,dff2],axis=1)

final = final.iloc[:,1:]
final

ptrain = final.iloc[:8693]
ptest = final.iloc[8693:]
ptrain["Transported"] = y

ptrain.to_csv("ptrain.csv")
ptest.to_csv("ptest.csv")

from sklearn.impute import SimpleImputer, KNNImputer
impute = SimpleImputer(strategy = "median")
knnimputer = KNNImputer(n_neighbors=25)

f2 = final.drop(final.columns[[0,1,2,4,-5,-3]],axis=1)
f2

f2 = impute.fit_transform(f2)
f2 = pd.DataFrame(f2)

f2 = sc.fit_transform(f2)
f2 = pd.DataFrame(f2)

f3 = pd.DataFrame(ohe.fit_transform(final.iloc[:,[0,1,2,4,-5,-3]]).toarray())

cleaned = pd.concat([f2,f3],axis=1)
cleaned

train = cleaned.iloc[:8693]
test = cleaned.iloc[8693:]
train.shape,test.shape

def classifier(train,y,test):
  from sklearn.svm import SVC
  model = SVC(kernel="linear",random_state=0)
  model.fit(train,y)
  pred_1 = model.predict(test)
  
  from sklearn.linear_model import LogisticRegression
  model2 = LogisticRegression(random_state=0)
  model2.fit(train,y)
  pred_2 = model2.predict(test)

  from sklearn.tree import DecisionTreeClassifier
  model3 = DecisionTreeClassifier(criterion = "entropy",random_state=0)
  model3.fit(train,y)
  pred_3 = model3.predict(test)
  
  from sklearn.neighbors import KNeighborsClassifier
  model4 = KNeighborsClassifier(n_neighbors=5,metric="minkowski",p=2)
  model4.fit(train,y)
  pred_4 = model4.predict(test)
  
  test2 = pd.read_csv("test.csv")
  id = test2.iloc[:,0].values

  sub = pd.DataFrame({"PassengerId":id,"Transported":pred_1})
  sub.to_csv("Submit1.csv",index=False)
  
  sub = pd.DataFrame({"PassengerId":id,"Transported":pred_2})
  sub.to_csv("Submit2.csv",index=False)

  sub = pd.DataFrame({"PassengerId":id,"Transported":pred_3})
  sub.to_csv("Submit3.csv",index=False)
  
  sub = pd.DataFrame({"PassengerId":id,"Transported":pred_4})
  sub.to_csv("Submit4.csv",index=False)

  return pred_1,pred_2,pred_3,pred_4

p,o,i,u = classifier(train,y,test)

from sklearn.tree import DecisionTreeClassifier
model5 = DecisionTreeClassifier(criterion = "entropy",random_state=0,min_leaf_nodes=100)
model5.fit(train,y)
pred_5 = model5.predict(test)

from sklearn.metrics import accuracy_score

accuracy_score(pred_5,i)

accuracy_score(p,o),accuracy_score(o,i),accuracy_score(i,u),accuracy_score(u,p)

from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import Adam
model = Sequential()
model.add(Dense(512,activation='elu',input_shape=(35,)))
model.add(Dense(512,activation='elu'))
model.add(Dense(256,activation='elu'))
model.add(Dense(256,activation='elu'))
model.add(Dense(128,activation='elu'))
model.add(Dense(128,activation='elu'))
model.add(Dense(1,activation = "sigmoid"))

model.summary()
model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.0001), metrics=["accuracy"])

model.fit(train,y,epochs=100)

pre = model.predict(test)

li = (pre > 0.5).astype(np.float32)

li = [a[0] for a in li]

pre = [bool(a) for a in li]

pre[:6]

test2 = pd.read_csv("test.csv")
id = test2.iloc[:,0].values
sub = pd.DataFrame({"PassengerId":id,"Transported":pre})
sub.to_csv("Submitpy4.csv",index=False)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier(criterion = "gini",random_state=0)
model.fit(train,y)
ypred = model.predict(test)

ypred

train["Tar"]=y

train

from pycaret.classification import *

from pycaret.datasets import get_data
data = get_data("juice")

s = setup(data,target="Purchase")

train.columns=[a for a in range(0,36)]

s = setup(train,target=35)

compare_models()

mod = create_model("lightgbm")

print(mod)

tmod = tune_model(mod)

tmod

p2 = tmod.predict(test)

