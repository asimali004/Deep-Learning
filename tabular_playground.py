# -*- coding: utf-8 -*-
"""Tabular Playground.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PIVa6l8_HdiVrKoGbymLWCKlcJEafiil
"""

import numpy as np
import pandas as pd
import plotly.express as px

from sklearn.preprocessing import LabelEncoder,OneHotEncoder,StandardScaler
sc = StandardScaler()
le = LabelEncoder()
ohe = OneHotEncoder()

df = pd.read_csv("train.csv")

df.sample(5)

df.info()

df.isnull().sum()

y = df.iloc[:,-1]
train = df.iloc[:,:-1]
train = train.iloc[:,1:]

train

df1 = pd.read_csv("test.csv")

df1.sample(5)

df1.info()

df1.isnull().sum()

test = df1.iloc[:,1:]
test

train.sample()

test.sample()

train.shape,test.shape,

final = pd.concat([train,test])
final

from sklearn.impute import SimpleImputer, KNNImputer
impute = SimpleImputer(strategy = "mean")
knnimputer = KNNImputer(n_neighbors=10)

f2 = final.drop(train.columns[[0,2,3]],axis=1)

f2 = impute.fit_transform(f2)
f2 = pd.DataFrame(f2)

f2 = sc.fit_transform(f2)
f2 = pd.DataFrame(f2)

f3 = pd.DataFrame(ohe.fit_transform(final.iloc[:,[0,2,3]]).toarray())

cleaned = pd.concat([f2,f3],axis=1)
cleaned

train = cleaned.iloc[:26570,:]
test = cleaned.iloc[26570:,:]

y

def classifier(train,y,test):
  from sklearn.svm import SVC
  model = SVC(kernel="linear",random_state=0)
  model.fit(train,y)
  pred_1 = model.predict(test)
  
  from sklearn.linear_model import LogisticRegression
  model2 = LogisticRegression(random_state=0)
  model2.fit(train,y)
  pred_2 = model2.predict(test)

  from sklearn.tree import DecisionTreeClassifier
  model3 = DecisionTreeClassifier(criterion = "entropy",random_state=0)
  model3.fit(train,y)
  pred_3 = model3.predict(test)
  
  from sklearn.neighbors import KNeighborsClassifier
  model4 = KNeighborsClassifier(n_neighbors=5,metric="minkowski",p=2)
  model4.fit(train,y)
  pred_4 = model4.predict(test)
  
  test2 = pd.read_csv("test.csv")
  id = test2.iloc[:,0].values

  sub = pd.DataFrame({"id":id,"failure":pred_1})
  sub.to_csv("Submit1.csv",index=False)
  
  sub = pd.DataFrame({"id":id,"failure":pred_2})
  sub.to_csv("Submit2.csv",index=False)

  sub = pd.DataFrame({"id":id,"failure":pred_3})
  sub.to_csv("Submit3.csv",index=False)
  
  sub = pd.DataFrame({"id":id,"failure":pred_4})
  sub.to_csv("Submit4.csv",index=False)

classifier(train,y,test)

from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import Adam
model = Sequential()
model.add(Dense(512, kernel_initializer='normal',activation='relu',input_shape=(36,)))
model.add(Dense(512, kernel_initializer='normal',activation='relu'))
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
model.add(Dense(128, kernel_initializer='normal',activation='relu'))
model.add(Dense(128, kernel_initializer='normal',activation='relu'))
model.add(Dense(1,activation = "sigmoid"))

model.summary()
model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.0001), metrics=["accuracy"])

model.fit(train,y,epochs=50)

pre = model.predict(test)

li = (pre > 0.5).astype(np.float32)

li = [a[0] for a in li]
li

test2 = pd.read_csv("test.csv")
id = test2.iloc[:,0].values

sub = pd.DataFrame({"id":id,"failure":li})
sub.to_csv("Submit5.csv",index=False)

