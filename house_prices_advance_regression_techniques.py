# -*- coding: utf-8 -*-
"""House Prices Advance Regression Techniques.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JFgmJJUnahKYCKVi47467uLvCMSNONmk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def dataimputer(df,a,b):
  from sklearn.impute import SimpleImputer, KNNImputer
  impute = SimpleImputer(strategy = "most_frequent")
  knnimputer = KNNImputer(n_neighbors=25)
  if len(a)!=0:
    df2 = df.iloc[:,a]
    df2 = knnimputer.fit_transform(df2)
    df2 = pd.DataFrame(df2)
  if len(b)!=0:
    df3 = df.iloc[:,b]
    df3 = impute.fit_transform(df3)
    df3 = pd.DataFrame(df3)
  i=0
  for cc in a:
    df.iloc[:,cc] = df2.iloc[:,i]
    i=i+1
  j=0
  for bb in b:
    df.iloc[:,bb] = df3.iloc[:,j]
    j=j+1
  return df

def nullfinder(df):
  num = []
  obj = []
  li1 = df.isnull().sum().values
  li2 = df.dtypes.values
  for a in range(0,len(df.columns)):
    if li1[a]>0:
      if li2[a]=="int" or li2[a]=="float":
        num.append(a)
      elif li2[a]=="O":
        obj.append(a)
  return num,obj

def normalize(df,b,a):
  from sklearn.preprocessing import OneHotEncoder
  from sklearn.preprocessing import StandardScaler
  ohe = OneHotEncoder()
  sc = StandardScaler()

  df2 = df.iloc[:,a]
  df2 = ohe.fit_transform(df2)
  df2 = pd.DataFrame(df2.toarray())

  df3 = df.iloc[:,b]
  df3 = sc.fit_transform(df3)
  df3 = pd.DataFrame(df3)

  df = pd.concat([df2,df3],axis=1)
  return df

def typefinder(df):
  num2 = []
  obj2 = []
  li2 = df.dtypes.values
  for a in range(0,len(df.columns)):
    if li2[a]=="int" or li2[a]=="float":
      num2.append(a)
    elif li2[a]=="O":
      obj2.append(a)
  return num2,obj2

train = pd.read_csv("/content/train (1).csv")
train.shape

test = pd.read_csv("/content/test (1).csv")
test.shape

y = train.iloc[:,-1]
train.drop(train.columns[-1],axis=1,inplace=True)

final = pd.concat([train,test])
val = final.isnull().sum().values

final = pd.concat([train,test])
num,obj = nullfinder(final)
_f = dataimputer(final,num,obj)
num2,obj2 = typefinder(_f)
_f2 = normalize(_f,num2,obj2)

train = _f2.iloc[:1460]
test = _f2.iloc[1460:]

num,obj = nullfinder(train)
train_f = dataimputer(train,num,obj)

num2,obj2 = typefinder(train_f)
train_f2 = normalize(train_f,num2,obj2)

num3,obj3 = nullfinder(test)
test_f = dataimputer(test,num3,obj3)

num4,obj4 = typefinder(test_f)
test_f2 = normalize(test_f,num4,obj4)

def regressor1(x_train,x_test,y_train):
  from sklearn.linear_model import LinearRegression
  from sklearn.tree import DecisionTreeRegressor
  from sklearn.ensemble import RandomForestRegressor  
  from sklearn.svm import SVR

  lr = LinearRegression()
  lr.fit(x_train,y_train)
  y_pred = lr.predict(x_test)
  
  dtr = DecisionTreeRegressor(max_leaf_nodes=15)
  dtr.fit(x_train,y_train)
  y_pred2 = dtr.predict(x_test)

  rfr = RandomForestRegressor(n_estimators=1500,criterion="absolute_error")
  rfr.fit(x_train,y_train)
  y_pred3 = rfr.predict(x_test)

  svr = SVR()
  svr.fit(x_train,y_train)
  y_pred4 = svr.predict(x_test)

  return y_pred,y_pred2,y_pred3,y_pred4

train.shape,test.shape

p1,p2,p3,p4 = regressor1(train,test,y)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(p1,p2),mean_absolute_error(p2,p3),mean_absolute_error(p3,p4),mean_absolute_error(p4,p1),mean_absolute_error(p4,p2),mean_absolute_error(p1,p3)

sub = pd.read_csv("/content/sample_submission.csv")

te = pd.read_csv("/content/test (1).csv")
id = te.iloc[:,0]

submission = pd.DataFrame({"Id":id,"SalePrice":p3})

submission.to_csv("Submission.csv",index=False)

submission=pd.read_csv("Submission.csv")
submission

from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import Adam
model = Sequential()
model.add(Dense(512, kernel_initializer='normal',activation='relu',input_shape=(289,)))
model.add(Dense(512, kernel_initializer='normal',activation='relu'))
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
model.add(Dense(128, kernel_initializer='normal',activation='relu'))
model.add(Dense(128, kernel_initializer='normal',activation='relu'))
model.add(Dense(1))

model.summary()
model.compile(loss='mse', optimizer=Adam(lr=0.0001), metrics=['mse','mae'])

model.fit(train,y,epochs=500)

pr = model.predict(test)

pr = [a[0] for a in pr]
t2 = pd.read_csv("/content/test (1).csv")
id = t2.iloc[:,0]
submission = pd.DataFrame({"Id":id,"SalePrice":pr})
submission.to_csv("Submission.csv",index=False)
pd.read_csv("Submission.csv")

